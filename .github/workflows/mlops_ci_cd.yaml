name: MLOps CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: "sudarshan889"
  IMAGE_TAG: latest

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:

    - name: Checkout repository
      uses: actions/checkout@v4


    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Show modeltraining.py content in CI/CD
      run: |
        echo "=== modeltraining.py content in CI/CD ==="
        grep -n "input_example" ./mlops/src/project_name/components/modeltraining.py || echo "No match found"
        echo "=== First 20 lines ==="
        head -n 20 ./mlops/src/project_name/components/modeltraining.py

    - name: Build & push MLflow
      run: |
        export REGISTRY="sudarshan889"
        export IMAGE_TAG="latest"
        docker build -t $REGISTRY/mlflow:$IMAGE_TAG ./mlflow
        docker push $REGISTRY/mlflow:$IMAGE_TAG


    - name: Deploy MLflow on Azure VM
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.AZURE_VM_IP }}
        username: sudarshanuser
        key: ${{ secrets.AZURE_VM_SSH_KEY }}
        port: 22
        script: |
          export REGISTRY="sudarshan889"
          export IMAGE_TAG="latest"
          docker pull $REGISTRY/mlflow:$IMAGE_TAG
          docker stop mlflow || true
          docker rm mlflow || true
          docker run -d \
            --name mlflow \
            -p 5000:5000 \
            -v $HOME/mlruns:/mlruns \
            -v $HOME/mlflow.db:/mlflow.db \
            -e MLFLOW_BACKEND_STORE_URI=sqlite:///mlflow.db \
            -e MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlruns \
            $REGISTRY/mlflow:$IMAGE_TAG
      


    - name: Run DVC Repro
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.AZURE_VM_IP }}
        username: sudarshanuser
        key: ${{ secrets.AZURE_VM_SSH_KEY }}
        port: 22
        script: |
          if [ ! -d ~/mlops ]; then
            git clone https://github.com/pandu-12345/mlops-template.git ~/mlops
          else
            cd ~/mlops
            git fetch --all
            git reset --hard origin/main
          fi
          
          cd ~/mlops
          
          export PYTHONPATH=$PYTHONPATH:~/mlops
          export MLFLOW_TRACKING_URI=http://${{ secrets.AZURE_VM_IP }}:5000
          export MLFLOW_EXPERIMENT_NAME="my_experiment"

          if [ ! -d ".venv" ]; then
            python3 -m venv .venv
          fi
          

          source .venv/bin/activate


          pip install --upgrade pip

          pip install --prefer-binary -r requirements.txt
          pip install -e .
          if nvidia-smi &> /dev/null; then
           pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121
          fi

          dvc repro


    - name: Build & push Flask API
      run: |
        docker build -t $REGISTRY/flask-api:$IMAGE_TAG ./api
        docker push $REGISTRY/flask-api:$IMAGE_TAG


    - name: Build & push Streamlit
      run: |
        docker build -t $REGISTRY/streamlit:$IMAGE_TAG ./templates
        docker push $REGISTRY/streamlit:$IMAGE_TAG

    - name: Deploy Flask & Streamlit
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.AZURE_VM_IP }}
        username: sudarshanuser
        key: ${{ secrets.AZURE_VM_SSH_KEY }}
        port: 22
        script: |
          cd ~/mlops
          docker-compose pull
          docker-compose up -d flask-api streamlit